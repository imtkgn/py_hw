"""
    3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
    В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
    В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
    умножение (__mul__()), деление (__truediv__()).
    Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное)
    деление клеток, соответственно. В методе деления должно осуществляться округление значения до целого числа.
    - Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
    - Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
    иначе выводить соответствующее сообщение.
    - Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
    - Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
    В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
    Данный метод позволяет организовать ячейки по рядам.
    Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
    Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
    Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
    Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.
"""

class Cell:
    def __init__(self, cnt_cell: int):
        self.cnt_cell = cnt_cell
        print(self.__str__())

    def __str__(self):
        return f'Ячеек клетки: {self.cnt_cell}\n{self.make_order()}\n'

    def __add__(self, other):
        return Cell(self.cnt_cell + other.cnt_cell)

    def __sub__(self, other):
        if (self.cnt_cell - other.cnt_cell) > 0:
            return Cell(self.cnt_cell - other.cnt_cell)
        else:
            print("Ошибка: попытка создать пустую клетку или с отрицательным кол-вом ячеек!\n")

    def __mul__(self, other):
        return Cell(self.cnt_cell * other.cnt_cell)

    def __truediv__(self, other):
        return Cell(self.cnt_cell // other.cnt_cell)

    def make_order(self):
        return ''.join(['*' if el % 5 != 0 else '*\n' for el in range(1, self.cnt_cell + 1)])

my_cell = Cell(12)
my_cell_2 = Cell(5)

my_cell_add = my_cell + my_cell_2
my_cell_sub_neg = my_cell_2 - my_cell
my_cell_sub_pos = my_cell - my_cell_2
my_cell_mul = my_cell * my_cell_2
my_cell_truediv = my_cell / my_cell_2












